// Code generated by MockGen. DO NOT EDIT.
// Source: calendar_client.go

// Package mock_outbounds is a generated GoMock package.
package mock_outbounds

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v3 "google.golang.org/api/calendar/v3"
)

// MockCalendarClient is a mock of CalendarClient interface.
type MockCalendarClient struct {
	ctrl     *gomock.Controller
	recorder *MockCalendarClientMockRecorder
}

// MockCalendarClientMockRecorder is the mock recorder for MockCalendarClient.
type MockCalendarClientMockRecorder struct {
	mock *MockCalendarClient
}

// NewMockCalendarClient creates a new mock instance.
func NewMockCalendarClient(ctrl *gomock.Controller) *MockCalendarClient {
	mock := &MockCalendarClient{ctrl: ctrl}
	mock.recorder = &MockCalendarClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalendarClient) EXPECT() *MockCalendarClientMockRecorder {
	return m.recorder
}

// SearchEvents mocks base method.
func (m *MockCalendarClient) SearchEvents(serachQuery string) (*v3.Events, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEvents", serachQuery)
	ret0, _ := ret[0].(*v3.Events)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEvents indicates an expected call of SearchEvents.
func (mr *MockCalendarClientMockRecorder) SearchEvents(serachQuery interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEvents", reflect.TypeOf((*MockCalendarClient)(nil).SearchEvents), serachQuery)
}

// UpdateEventSummary mocks base method.
func (m *MockCalendarClient) UpdateEventSummary(targetEvent *v3.Event, summary string) (*v3.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventSummary", targetEvent, summary)
	ret0, _ := ret[0].(*v3.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEventSummary indicates an expected call of UpdateEventSummary.
func (mr *MockCalendarClientMockRecorder) UpdateEventSummary(targetEvent, summary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventSummary", reflect.TypeOf((*MockCalendarClient)(nil).UpdateEventSummary), targetEvent, summary)
}
